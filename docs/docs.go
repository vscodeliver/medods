// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/logout": {
            "get": {
                "security": [
                    {
                        "AccessToken": []
                    }
                ],
                "description": "Blacklists current access token and deletes user session.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Logout current user and blacklist access token",
                "responses": {
                    "200": {
                        "description": "message: logged out",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "token has no jti",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "missing or invalid authorization header or token",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "server error or redis error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/me": {
            "get": {
                "security": [
                    {
                        "AccessToken": []
                    }
                ],
                "description": "Extracts user ID from access token and returns it.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Get info about current authenticated user",
                "responses": {
                    "200": {
                        "description": "user_id returned",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "missing token or invalid token",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/refresh/{userId}": {
            "post": {
                "security": [
                    {
                        "AccessToken": []
                    }
                ],
                "description": "Validates refresh token and user ID, issues new tokens.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh access and refresh tokens using refresh token and user ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID (GUID)",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Refresh token request body",
                        "name": "refreshRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.refreshRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.tokenResponse"
                        }
                    },
                    "400": {
                        "description": "invalid refresh request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "invalid or expired refresh token / unauthorized device",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/token/{userId}": {
            "post": {
                "description": "Generates JWT access token and refresh token session. If user does not exist, creates user with given userId.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Generate access and refresh tokens for a user by user ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID (GUID)",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.tokenResponse"
                        }
                    },
                    "400": {
                        "description": "missing user id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.refreshRequest": {
            "type": "object",
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "handlers.tokenResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "AccessToken": {
            "description": "Enter your bearer token in the format **Bearer \u0026lt;token\u003e**",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
